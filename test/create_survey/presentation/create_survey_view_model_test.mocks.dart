// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_survey_app_web/test/create_survey/presentation/create_survey_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i13;

import 'package:flutter/foundation.dart' as _i9;
import 'package:flutter/material.dart' as _i8;
import 'package:flutter_survey_app_web/core/connection/network_info.dart'
    as _i16;
import 'package:flutter_survey_app_web/core/export.dart' as _i11;
import 'package:flutter_survey_app_web/feature/create_survey/export.dart'
    as _i3;
import 'package:flutter_survey_app_web/feature/image_process/domain/usecase/crop_image_use_case.dart'
    as _i6;
import 'package:flutter_survey_app_web/feature/image_process/domain/usecase/get_image_file_use_case.dart'
    as _i5;
import 'package:flutter_survey_app_web/feature/image_process/domain/usecase/get_image_url_use_case.dart'
    as _i4;
import 'package:flutter_survey_app_web/feature/image_process/domain/usecase/remove_survey_images_use_case.dart'
    as _i7;
import 'package:flutter_survey_app_web/feature/image_process/export.dart'
    as _i2;
import 'package:flutter_survey_app_web/feature/shared_layers/export.dart'
    as _i12;
import 'package:flutter_survey_app_web/product/helper/link_sharing_helper.dart'
    as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImageHelper_0 extends _i1.SmartFake implements _i2.ImageHelper {
  _FakeImageHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveSurveyUseCase_1 extends _i1.SmartFake
    implements _i3.RemoveSurveyUseCase {
  _FakeRemoveSurveyUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShareSurveyInfoUseCase_2 extends _i1.SmartFake
    implements _i3.ShareSurveyInfoUseCase {
  _FakeShareSurveyInfoUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShareQuestionsUseCase_3 extends _i1.SmartFake
    implements _i3.ShareQuestionsUseCase {
  _FakeShareQuestionsUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetImageUrlUseCase_5 extends _i1.SmartFake
    implements _i4.GetImageUrlUseCase {
  _FakeGetImageUrlUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetImageFileUseCase_6 extends _i1.SmartFake
    implements _i5.GetImageFileUseCase {
  _FakeGetImageFileUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCropImageUseCase_7 extends _i1.SmartFake
    implements _i6.CropImageUseCase {
  _FakeCropImageUseCase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveSurveyImagesUseCase_8 extends _i1.SmartFake
    implements _i7.RemoveSurveyImagesUseCase {
  _FakeRemoveSurveyImagesUseCase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_9 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_10 extends _i1.SmartFake implements _i8.Widget {
  _FakeWidget_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_11 extends _i1.SmartFake
    implements _i8.InheritedWidget {
  _FakeInheritedWidget_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_12 extends _i1.SmartFake
    implements _i8.DiagnosticsNode {
  _FakeDiagnosticsNode_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i9.TextTreeConfiguration? parentConfiguration,
    _i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [SurveyLogic].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveyLogic extends _i1.Mock implements _i3.SurveyLogic {
  MockSurveyLogic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ImageHelper get imageHelper => (super.noSuchMethod(
        Invocation.getter(#imageHelper),
        returnValue: _FakeImageHelper_0(
          this,
          Invocation.getter(#imageHelper),
        ),
      ) as _i2.ImageHelper);

  @override
  _i3.RemoveSurveyUseCase get removeSurveyUseCase => (super.noSuchMethod(
        Invocation.getter(#removeSurveyUseCase),
        returnValue: _FakeRemoveSurveyUseCase_1(
          this,
          Invocation.getter(#removeSurveyUseCase),
        ),
      ) as _i3.RemoveSurveyUseCase);

  @override
  _i3.ShareSurveyInfoUseCase get shareSurveyInfoUseCase => (super.noSuchMethod(
        Invocation.getter(#shareSurveyInfoUseCase),
        returnValue: _FakeShareSurveyInfoUseCase_2(
          this,
          Invocation.getter(#shareSurveyInfoUseCase),
        ),
      ) as _i3.ShareSurveyInfoUseCase);

  @override
  _i3.ShareQuestionsUseCase get shareQuestionsUseCase => (super.noSuchMethod(
        Invocation.getter(#shareQuestionsUseCase),
        returnValue: _FakeShareQuestionsUseCase_3(
          this,
          Invocation.getter(#shareQuestionsUseCase),
        ),
      ) as _i3.ShareQuestionsUseCase);

  @override
  _i10.Future<_i3.Either<_i11.Failure, bool>> shareSurvey({
    required _i12.SurveyEntity? surveyEntity,
    required _i13.Uint8List? selectedSurveyImageBytes,
    required Map<_i12.QuestionEntity, _i13.Uint8List?>? questionEntityMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #shareSurvey,
          [],
          {
            #surveyEntity: surveyEntity,
            #selectedSurveyImageBytes: selectedSurveyImageBytes,
            #questionEntityMap: questionEntityMap,
          },
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
            _FakeEither_4<_i11.Failure, bool>(
          this,
          Invocation.method(
            #shareSurvey,
            [],
            {
              #surveyEntity: surveyEntity,
              #selectedSurveyImageBytes: selectedSurveyImageBytes,
              #questionEntityMap: questionEntityMap,
            },
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, bool>>);

  @override
  _i10.Future<void> removeSurvey({required String? surveyId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSurvey,
          [],
          {#surveyId: surveyId},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [LinkSharingHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkSharingHelper extends _i1.Mock implements _i14.LinkSharingHelper {
  MockLinkSharingHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void shareSurveyLink({required String? surveyId}) => super.noSuchMethod(
        Invocation.method(
          #shareSurveyLink,
          [],
          {#surveyId: surveyId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  String generateSurveyLink(String? surveyId) => (super.noSuchMethod(
        Invocation.method(
          #generateSurveyLink,
          [surveyId],
        ),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.method(
            #generateSurveyLink,
            [surveyId],
          ),
        ),
      ) as String);
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i16.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> get currentConnectivityResult => (super.noSuchMethod(
        Invocation.getter(#currentConnectivityResult),
        returnValue: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}

/// A class which mocks [ImageHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageHelper extends _i1.Mock implements _i2.ImageHelper {
  MockImageHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetImageUrlUseCase get getImageUrlUseCase => (super.noSuchMethod(
        Invocation.getter(#getImageUrlUseCase),
        returnValue: _FakeGetImageUrlUseCase_5(
          this,
          Invocation.getter(#getImageUrlUseCase),
        ),
      ) as _i4.GetImageUrlUseCase);

  @override
  _i5.GetImageFileUseCase get getImageUseCase => (super.noSuchMethod(
        Invocation.getter(#getImageUseCase),
        returnValue: _FakeGetImageFileUseCase_6(
          this,
          Invocation.getter(#getImageUseCase),
        ),
      ) as _i5.GetImageFileUseCase);

  @override
  _i6.CropImageUseCase get cropImageUseCase => (super.noSuchMethod(
        Invocation.getter(#cropImageUseCase),
        returnValue: _FakeCropImageUseCase_7(
          this,
          Invocation.getter(#cropImageUseCase),
        ),
      ) as _i6.CropImageUseCase);

  @override
  _i7.RemoveSurveyImagesUseCase get removeSurveyImagesUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#removeSurveyImagesUseCase),
        returnValue: _FakeRemoveSurveyImagesUseCase_8(
          this,
          Invocation.getter(#removeSurveyImagesUseCase),
        ),
      ) as _i7.RemoveSurveyImagesUseCase);

  @override
  _i10.Future<_i3.XFile?> getImage({
    required _i3.ImageSource? selectedSource,
    required _i3.CropAspectRatio? cropRatio,
    required _i8.BuildContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [],
          {
            #selectedSource: selectedSource,
            #cropRatio: cropRatio,
            #context: context,
          },
        ),
        returnValue: _i10.Future<_i3.XFile?>.value(),
      ) as _i10.Future<_i3.XFile?>);

  @override
  _i10.Future<_i3.Either<_i11.Failure, String>> getImageUrl({
    required _i13.Uint8List? imageByte,
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImageUrl,
          [],
          {
            #imageByte: imageByte,
            #path: path,
          },
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_4<_i11.Failure, String>(
          this,
          Invocation.method(
            #getImageUrl,
            [],
            {
              #imageByte: imageByte,
              #path: path,
            },
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, String>>);

  @override
  _i10.Future<void> removeSurveyImages({
    required String? surveyId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSurveyImages,
          [],
          {
            #surveyId: surveyId,
            #userId: userId,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i3.XFile {
  MockXFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i10.Future<void> saveTo(String? path) => (super.noSuchMethod(
        Invocation.method(
          #saveTo,
          [path],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i10.Future<int>.value(0),
      ) as _i10.Future<int>);

  @override
  _i10.Future<String> readAsString(
          {_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i10.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i10.Future<String>);

  @override
  _i10.Future<_i13.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i10.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i10.Future<_i13.Uint8List>);

  @override
  _i10.Stream<_i13.Uint8List> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i10.Stream<_i13.Uint8List>.empty(),
      ) as _i10.Stream<_i13.Uint8List>);

  @override
  _i10.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i10.Future<DateTime>.value(_FakeDateTime_9(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i10.Future<DateTime>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i8.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_10(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i8.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i8.InheritedWidget dependOnInheritedElement(
    _i8.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_11(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i8.InheritedWidget);

  @override
  void visitAncestorElements(_i8.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i8.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i8.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.DiagnosticsNode describeElement(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_12(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  _i8.DiagnosticsNode describeWidget(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_12(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  List<_i8.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i8.DiagnosticsNode>[],
      ) as List<_i8.DiagnosticsNode>);

  @override
  _i8.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_12(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i8.DiagnosticsNode);
}
