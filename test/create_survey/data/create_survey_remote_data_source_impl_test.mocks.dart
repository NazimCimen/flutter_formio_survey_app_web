// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_survey_app_web/test/create_survey/data/create_survey_remote_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_survey_app_web/product/firebase/model/base_firebase_model.dart'
    as _i1;
import 'package:flutter_survey_app_web/product/firebase/service/base_firebase_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BaseFirebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseFirebaseService<T extends _i1.BaseFirebaseModel<T>>
    extends _i2.Mock implements _i3.BaseFirebaseService<T> {
  MockBaseFirebaseService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setItem(
    String? collectionPath,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            collectionPath,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateItem(
    String? collectionPath,
    String? docId,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [
            collectionPath,
            docId,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteItem(
    String? collectionPath,
    String? docId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [
            collectionPath,
            docId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSubCollections(List<String>? subCollections) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubCollections,
          [subCollections],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<T>> getItems(String? collectionPath) => (super.noSuchMethod(
        Invocation.method(
          #getItems,
          [collectionPath],
        ),
        returnValue: _i4.Future<List<T>>.value(<T>[]),
      ) as _i4.Future<List<T>>);
}
